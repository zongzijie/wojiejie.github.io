<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zongzijie&#39;Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zongzijie.github.io/"/>
  <updated>2019-09-21T13:20:32.924Z</updated>
  <id>http://zongzijie.github.io/</id>
  
  <author>
    <name>wojiejie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次生产环境CPU100%排查实践</title>
    <link href="http://zongzijie.github.io/2019/08/26/cpu99/"/>
    <id>http://zongzijie.github.io/2019/08/26/cpu99/</id>
    <published>2019-08-26T21:23:48.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>生产环境通常是运维工程师维护，如果出现异常也是优先运维工程师来排查，但是运维工程师不精通产品的业务逻辑，如果异常涉及到业务逻辑，就事倍功半了，遇到这种情况，运维工程师会找产品研发工程师协助，如果此时研发工程师不具备分析dump包的能力，解决问题的效率就会变的很低，所以掌握如何调试和排查生产环境异常，是研发工程师必须掌握的技能。windbg是在windows平台下，强大的用户态和内核态调试工具。相比较于Visual Studio，它是一个轻量级的调试工具，所谓轻量级指的是它的安装文件大小较小，但是其调试功能，却比VS更为强大。它的另外一个用途是可以用来分析dump数据。<br><a href="https://download.microsoft.com/download/1/4/0/140EBDB7-F631-4191-9DC0-31C8ECB8A11F/wdk/wdksetup.exe" target="_blank" rel="noopener">微软windbg下载</a></p></blockquote><h2 id="故障发生"><a href="#故障发生" class="headerlink" title="故障发生"></a>故障发生</h2><blockquote><p><strong>8月21日下午4点48分左右客户的4台Web服务器同时CPU99%预警</strong></p></blockquote><p><img src="/images/cpu99/Picture2.png" alt=""><br><img src="/images/cpu99/warning2.png" alt=""></p><h2 id="服务器抓包"><a href="#服务器抓包" class="headerlink" title="服务器抓包"></a>服务器抓包</h2><blockquote><p>任务列表生成进程的转储文件</p></blockquote><p><img src="/images/cpu99/dump.png" alt=""></p><blockquote><p>dump包解压和传输同时也没闲着</p></blockquote><p>因为昨晚有程序更新，最先怀疑程序包问题，所以进行人工源码分析，没发现明显问题</p><h2 id="windbg-dump分析"><a href="#windbg-dump分析" class="headerlink" title="windbg dump分析"></a>windbg dump分析</h2><blockquote><p>本文涉及到的命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.load //加载模块</span><br><span class="line">!tp //查看线程池状态</span><br><span class="line">!runaway //显示当前进程的所有线程用户态时间信息</span><br><span class="line">~ [n] s //切换到n进程，n是!runaway 查看到的线程号</span><br><span class="line">!clrstack //打印clr调用堆栈信息</span><br></pre></td></tr></table></figure><blockquote><p>打开dump包，这里直接打开windbg后拖转到程序界面即可</p></blockquote><blockquote><p>.load 命令 加载SOS.dll,SOS.dll 扩展提供了大量用于检查托管堆的有用命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Loading Dump File [D:\w3wp.DMP]</span><br><span class="line">User Mini Dump File with Full Memory: Only application data is available</span><br><span class="line"></span><br><span class="line">Symbol search path is: srv*</span><br><span class="line">Executable search path is: </span><br><span class="line">Windows 8.1 Version 9600 MP (8 procs) Free x64</span><br><span class="line">Product: Server, suite: TerminalServer SingleUserTS</span><br><span class="line">6.3.9600.18217 (winblue_ltsb.160124-0053)</span><br><span class="line">Machine Name:</span><br><span class="line">Debug session time: Wed Aug 21 17:10.202 2019 (UTC + 8:00)</span><br><span class="line">System Uptime: 70 days 4:57:03.224</span><br><span class="line">Process Uptime: 0 days 1:16:33.000</span><br><span class="line">................................................................</span><br><span class="line">................................................................</span><br><span class="line">................................................................</span><br><span class="line">......................................</span><br><span class="line">Loading unloaded module list</span><br><span class="line">................................................................</span><br><span class="line">For analysis of this file, run !analyze -v</span><br><span class="line">ntdll!NtWaitForSingleObject+0xa:</span><br><span class="line">00007ffa`b365079a c3              ret</span><br><span class="line">0:000&gt; .load C:\Windows\Microsoft.NET\Framework64\v4.0.30319\sos.dll</span><br></pre></td></tr></table></figure><blockquote><p>!tp 命令 分析线程池,可以看到CPU利用率已经100%了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !tp</span><br><span class="line">CPU utilization: 100%</span><br><span class="line">Worker Thread: Total: 28 Running: 25 Idle: 3 MaxLimit: 32767 MinLimit: 8</span><br><span class="line">Work Request in Queue: 0</span><br><span class="line">--------------------------------------</span><br><span class="line">Number of Timers: 0</span><br><span class="line">--------------------------------------</span><br><span class="line">Completion Port Thread:Total: 3 Free: 1 MaxFree: 16 CurrentLimit: 1 MaxLimit: 1000 MinLimit: 8</span><br></pre></td></tr></table></figure><blockquote><p>!runaway 命令 显示当前进程的所有线程用户态时间信息，可以看到线程时间最长的是42线程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !runaway</span><br><span class="line"> User Mode Time</span><br><span class="line">  Thread       Time</span><br><span class="line">   42:3575c     0 days 0:26:12.234</span><br><span class="line">   47:368c0     0 days 0:22:24.250</span><br><span class="line">   50:36488     0 days 0:14:08.937</span><br><span class="line">   49:2b69c     0 days 0:13:52.218</span><br><span class="line">   51:3440c     0 days 0:12:54.937</span><br><span class="line">   48:363e8     0 days 0:08:27.453</span><br><span class="line">   53:302a8     0 days 0:07:16.953</span><br><span class="line">   52:353f8     0 days 0:07:09.234</span><br><span class="line">   56:36d88     0 days 0:06:17.484</span><br><span class="line">   64:35cf0     0 days 0:05:55.750</span><br><span class="line">   57:36ae0     0 days 0:05:26.046</span><br><span class="line">   62:3694c     0 days 0:05:24.796</span><br><span class="line">   58:35d1c     0 days 0:04:58.703</span><br><span class="line">   65:36114     0 days 0:04:48.093</span><br><span class="line">   61:36d58     0 days 0:04:33.750</span><br><span class="line">   60:36d9c     0 days 0:04:32.437</span><br><span class="line">   55:36ff0     0 days 0:04:27.453</span><br><span class="line">   63:369dc     0 days 0:03:54.375</span><br><span class="line">   54:33b70     0 days 0:03:38.578</span><br><span class="line">   59:35da0     0 days 0:03:28.109</span><br><span class="line">   70:359cc     0 days 0:02:43.203</span><br><span class="line">   69:2f074     0 days 0:02:09.687</span><br><span class="line">   71:3540c     0 days 0:01:46.140</span><br><span class="line">   72:341ec     0 days 0:01:10.781</span><br><span class="line">   73:3674c     0 days 0:01:01.921</span><br></pre></td></tr></table></figure><blockquote><p>42线程时间最长，所以先查看42主线程调用堆栈</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; ~42 s</span><br><span class="line">ntdll!NtYieldExecution+0xa:</span><br><span class="line">00007ffa`b3650bba c3              ret</span><br><span class="line">0:042&gt; !clrstack</span><br><span class="line">OS Thread Id: 0x3575c (42)</span><br><span class="line">        Child SP               IP Call Site</span><br><span class="line">00000049eeb8d5e8 00007ffab3650bba [RedirectedThreadFrame: 00000049eeb8d5e8] </span><br><span class="line">00000049eeb8d680 00007ffa52849e05 Mysoft.Slxt.TradeMng.Customize.DomainServices.DjOverdueRemindDomainService+c__DisplayClass7_1.b__7(Mysoft.Slxt.PriceMng.Model.TjDetail)</span><br><span class="line">00000049eeb8d700 00007ffa865c6111 *** WARNING: Unable to verify checksum for System.Core.ni.dll</span><br><span class="line">System.Linq.Enumerable+WhereSelectListIterator`2[[System.__Canon, mscorlib],[System.Guid, mscorlib]].MoveNext()</span><br><span class="line">00000049eeb8d750 00007ffa8c09a6a0 *** WARNING: Unable to verify checksum for mscorlib.ni.dll</span><br><span class="line">System.Collections.Generic.List`1[[System.Guid, mscorlib]]..ctor(System.Collections.Generic.IEnumerable`1)</span><br><span class="line">00000049eeb8d7d0 00007ffa865b8b6c System.Linq.Enumerable.ToList[[System.Guid, mscorlib]](System.Collections.Generic.IEnumerable`1)</span><br><span class="line">00000049eeb8d810 00007ffa5215bdd5 Mysoft.Slxt.TradeMng.Customize.DomainServices.DjOverdueRemindDomainService.UpdateRoomDjOverDusDays()</span><br><span class="line">00000049eeb8e000 00007ffa520174de Castle.DynamicProxy.AbstractInvocation.Proceed()</span><br><span class="line">00000049eeb8e050 00007ffa5201ee34 Mysoft.Map6.Core.Pipeline.Proxy.PipelineInvocation.Proceed()</span><br><span class="line">00000049eeb8e080 00007ffa5201ede4 Mysoft.Map6.Core.Pipeline.Proxy.Invoker.ServiceInvoker.TargetInvoke(Mysoft.Map6.Core.Pipeline.IPipelineInvocation)</span><br><span class="line">00000049eeb8e0b0 00007ffa5201f52d Mysoft.Map6.Core.Pipeline.Proxy.Invoker.ServiceInvoker.Invoke(Mysoft.Map6.Core.Pipeline.IPipelineInvocation)</span><br><span class="line">00000049eeb8e120 00007ffa5201772a Mysoft.Map6.Core.Pipeline.Proxy.PipelineInterceptor.Intercept(Castle.DynamicProxy.IInvocation)</span><br><span class="line">00000049eeb8e180 00007ffa5201762f Castle.DynamicProxy.AbstractInvocation.Proceed()</span><br><span class="line">00000049eeb8e1d0 00007ffa52159fb8 Mysoft.Slxt.TradeMng.Customize.AppServices.DjOverdueRemindAppService.UpdateRoomDjOverDusDays()</span><br><span class="line">00000049eeb8e210 00007ffa520174de Castle.DynamicProxy.AbstractInvocation.Proceed()</span><br><span class="line">00000049eeb8e260 00007ffa5201ee34 Mysoft.Map6.Core.Pipeline.Proxy.PipelineInvocation.Proceed()</span><br><span class="line">00000049eeb8e290 00007ffa5201ede4 Mysoft.Map6.Core.Pipeline.Proxy.Invoker.ServiceInvoker.TargetInvoke(Mysoft.Map6.Core.Pipeline.IPipelineInvocation)</span><br><span class="line">00000049eeb8e2c0 00007ffa5201a9f2 Mysoft.Map6.Core.Pipeline.Proxy.Invoker.AppServiceInvoker.Invoke(Mysoft.Map6.Core.Pipeline.IPipelineInvocation)</span><br><span class="line">00000049eeb8e4a0 00007ffa5201772a Mysoft.Map6.Core.Pipeline.Proxy.PipelineInterceptor.Intercept(Castle.DynamicProxy.IInvocation)</span><br><span class="line">00000049eeb8e500 00007ffa5201762f Castle.DynamicProxy.AbstractInvocation.Proceed()</span><br><span class="line">00000049eeb8e550 00007ffa52159bfc Mysoft.Slxt.TradeMng.Customize.PublicServices.DjOverdueRemindPublicService.UpdateRoomDjOverDueDaysAction(System.Object)</span><br><span class="line">00000049eeb8e590 00007ffa52159a87 Mysoft.Map6.Core.Service.AppService+c__DisplayClass22_0.b__0()</span><br><span class="line">00000049eeb8e620 00007ffa8b76c7e6 System.Threading.Tasks.Task.Execute()</span><br><span class="line">00000049eeb8e660 00007ffa8b7231d3 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)</span><br><span class="line">00000049eeb8e730 00007ffa8b723064 System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)</span><br><span class="line">00000049eeb8e760 00007ffa8b76ca85 System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)</span><br><span class="line">00000049eeb8e810 00007ffa8b76c1b3 System.Threading.Tasks.Task.ExecuteEntry(Boolean)</span><br><span class="line">00000049eeb8e850 00007ffa8b762362 System.Threading.ThreadPoolWorkQueue.Dispatch()</span><br><span class="line">00000049eeb8ece8 00007ffaa70a6bb3 [DebuggerU2MCatchHandlerFrame: 00000049eeb8ece8] </span><br><span class="line">00000049eeb8ee78 00007ffaa70a6bb3 [ContextTransitionFrame: 00000049eeb8ee78] </span><br><span class="line">00000049eeb8f0a8 00007ffaa70a6bb3 [DebuggerU2MCatchHandlerFrame: 00000049eeb8f0a8]</span><br></pre></td></tr></table></figure><blockquote><p>根据上面的堆栈信息，此时已经定位到具体出问题的接口是 <code>UpdateRoomDjOverDusDays</code></p></blockquote><p>通常100%CPU会怀疑死循环和无限递归，搜索代码分析，发现有很多个循环，但都很难引起死循环或者无限递归。</p><p>此时陷入尴尬，继续思考…</p><p>看到上面的线程CPU时间超过1分钟的有多个，逐个打开看堆栈<br>~47 s<br>~50 s<br>~49 s<br>发现堆栈信息都是相同的，是同一个接口调用</p><p>会不会是多线程一起跑，导致吃掉了所有CPU…</p><p>为了印证这个猜想，继续分析源码，看看是否有开启多线程的地方…果然找到了，如下图</p><p><img src="/images/cpu99/background.jpg" alt=""></p><h2 id="破案"><a href="#破案" class="headerlink" title="破案"></a>破案</h2><blockquote><p>短时间内运行多次调度任务，如何做到的？</p></blockquote><p>分析代码发现，这个接口的用途是调度任务，这个调度任务出厂时是每天凌晨1点执行一次，正常情况不会出现多次调用，分析有以下2种情况会出现多次调用</p><ol><li>手动触发，调试接口，这个无日志，无证据，只能人工排除</li><li>人工将调度任务的执行间隔调整到其他间隔，比如一分钟一次，就可以造成多线程堆积</li></ol><p>因为第一种情况无法确定，找不到证据，所以用排除法，先去找第二种可能的证据</p><p>首先去找系统的操作日志，发现的确在这个时间段有人操作个调度任务模块的功能，由于日志粒度不够细，无法断定是操作了什么功能</p><p>接下来就去找对应调度任务的运行日志，发现了问题…如图<br><img src="/images/cpu99/logs2.jpg" alt=""><br>上图中，第一个时间是凌晨1点的正常调度<br>但是在 16:41 分又调度了一次<br>接着 16:42 分又开始了一次<br>…后面还有30多次调度，每一个都是间隔一分钟</p><blockquote><p>结论</p></blockquote><p>到这里所有的问题已经得到证实</p><p>这个调度任务在16:41分时被人为将调度间隔改成了1分钟调度一次，由于是异步执行，每次调度都会立即返回，修改后30分钟左右才改回来。 在半小时内被调度了30多次，导致线程堆积，出现了瞬时CPU99%，20分钟后又逐渐下降（因为任务逐渐都执行完了） 后与相关操作人员证实，确实有进行过调度间隔改动，目的是为了手动触发调度任务。但由于不知道内部机制，配置改动后没有及时还原。 而且上面16：41分的最初调度时间也和最初的CPU预警时间吻合。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;生产环境通常是运维工程师维护，如果出现异常也是优先运维工程师来排查，但是运维工程师不精通产品的业务逻辑，如果异常涉
      
    
    </summary>
    
    
      <category term="windbg" scheme="http://zongzijie.github.io/tags/windbg/"/>
    
  </entry>
  
  <entry>
    <title>优雅的浏览器滚动截屏</title>
    <link href="http://zongzijie.github.io/2019/07/14/browser-screen/"/>
    <id>http://zongzijie.github.io/2019/07/14/browser-screen/</id>
    <published>2019-07-14T17:17:50.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<p>转：<a href="https://zhuanlan.zhihu.com/p/37086019" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/37086019</a></p><p>##利用 Chrome 浏览器的开发者工具截取整个页面</p><p>####打开 Chrome 浏览器，进入需要截图的网站页面</p><blockquote><p>等待页面加载完毕后，通过下面方法打开开发者工具<br>在页面任何地方点击鼠标右键，在弹出菜单中选择“检查（Inspect）”选项，或者使用快捷键组合：Alt + Command + I (Mac) || Ctrl + Shift + I (Windows)<br>使用快捷键组合来打开命令行（command palette）：Command + Shift + P (Mac) | Ctrl + Shift + P (Windows)<br>在命令行中输入“Screen”，这时自动补齐功能会显示出一些包含 “Screen” 关键字的命令。移动方向键到“Capture full size screenshot”并回车（或直接用鼠标点击这个选项）</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37086019&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/37086019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##利用 Ch
      
    
    </summary>
    
    
      <category term="滚动截屏" scheme="http://zongzijie.github.io/tags/%E6%BB%9A%E5%8A%A8%E6%88%AA%E5%B1%8F/"/>
    
      <category term="screenshot" scheme="http://zongzijie.github.io/tags/screenshot/"/>
    
  </entry>
  
  <entry>
    <title>WebApi,Mvc原理解析</title>
    <link href="http://zongzijie.github.io/2019/07/12/web-api-mvc/"/>
    <id>http://zongzijie.github.io/2019/07/12/web-api-mvc/</id>
    <published>2019-07-12T19:13:34.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XMLHttpRequest异步下载文件</title>
    <link href="http://zongzijie.github.io/2019/07/12/ajax-download-flie/"/>
    <id>http://zongzijie.github.io/2019/07/12/ajax-download-flie/</id>
    <published>2019-07-12T00:17:20.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出Excel</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">excel: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">'/ureport2demo/report/excel'</span>;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'POST'</span>, url, <span class="literal">true</span>);        <span class="comment">// 也可以使用POST方式，根据接口</span></span><br><span class="line">    xhr.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">    xhr.responseType = <span class="string">"blob"</span>;    <span class="comment">// 返回类型blob</span></span><br><span class="line">    <span class="comment">// 定义请求完成的处理函数，请求前也可以增加加载框/禁用下载按钮逻辑</span></span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 请求完成</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回200</span></span><br><span class="line">            <span class="keyword">var</span> blob = <span class="keyword">this</span>.response;</span><br><span class="line">            <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">            reader.readAsDataURL(blob);    <span class="comment">// 转换为base64，可以直接放入a表情href</span></span><br><span class="line">            reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 转换完成，创建一个a标签用于下载</span></span><br><span class="line">                <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">                a.download = params.file+<span class="string">'.xlsx'</span>;</span><br><span class="line">                a.href = e.target.result;</span><br><span class="line">                $(<span class="string">"body"</span>).append(a);    <span class="comment">// 修复firefox中无法触发click</span></span><br><span class="line">                a.click();</span><br><span class="line">                $(a).remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 发送ajax请求</span></span><br><span class="line">    xhr.send(<span class="built_in">JSON</span>.stringify(params))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="异步" scheme="http://zongzijie.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="下载" scheme="http://zongzijie.github.io/tags/%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="XMLHttpRequest" scheme="http://zongzijie.github.io/tags/XMLHttpRequest/"/>
    
  </entry>
  
  <entry>
    <title>短信消息编辑器</title>
    <link href="http://zongzijie.github.io/2019/07/07/msg-editor/"/>
    <id>http://zongzijie.github.io/2019/07/07/msg-editor/</id>
    <published>2019-07-07T23:38:16.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作中需要实现一个预编辑短信的编辑器<br>可以输入<br>可以添加字段<br>可以删除字段<br>最终可以生成一个短信消息模板字符串<br>如图：<br><img src="/images/msgeditor/msg-editor.png" alt=""><br><a href="/downloads/code/index.html">演示地址</a></p><p>实现源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>短信编辑器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .edit-content &#123;</span></span><br><span class="line"><span class="undefined">        word-wrap: break-word;</span></span><br><span class="line"><span class="undefined">        /*遇到空格整个单词显示不完就自动换行到下一行*/</span></span><br><span class="line"><span class="undefined">        word-break: break-all;</span></span><br><span class="line"><span class="undefined">        /*如果一行没有空格就到头截断单词换行*/</span></span><br><span class="line"><span class="undefined">        outline: none;</span></span><br><span class="line"><span class="undefined">        padding: 0 10px;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        height: 90px;</span></span><br><span class="line"><span class="undefined">        overflow-y: auto;</span></span><br><span class="line"><span class="undefined">        border: solid 1px #ddd;</span></span><br><span class="line"><span class="undefined">        margin: 6px 0 6px 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .edit-content span[contenteditable="false"] &#123;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        height: 22px;</span></span><br><span class="line"><span class="undefined">        line-height: 16px;</span></span><br><span class="line"><span class="undefined">        margin: 2px 0 2px 6px;</span></span><br><span class="line"><span class="undefined">        border: none;</span></span><br><span class="line"><span class="undefined">        padding: 3px 3px 3px 6px;</span></span><br><span class="line"><span class="undefined">        border-radius: 2px;</span></span><br><span class="line"><span class="undefined">        background-color: #eee;</span></span><br><span class="line"><span class="undefined">        /*position: relative;*/</span></span><br><span class="line"><span class="undefined">        max-width: 100%;</span></span><br><span class="line"><span class="undefined">        overflow: hidden;</span></span><br><span class="line"><span class="undefined">        text-overflow: ellipsis;</span></span><br><span class="line"><span class="undefined">        -ms-text-overflow: ellipsis;</span></span><br><span class="line"><span class="undefined">        white-space: nowrap;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .edit-content i &#123;</span></span><br><span class="line"><span class="undefined">        margin-left: 5px;</span></span><br><span class="line"><span class="undefined">        margin-right: 5px;</span></span><br><span class="line"><span class="undefined">        color: #898989;</span></span><br><span class="line"><span class="undefined">        cursor: pointer;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .edit-content i:hover &#123;</span></span><br><span class="line"><span class="undefined">        color: #333;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .edit-content .item &#123;</span></span><br><span class="line"><span class="undefined">        border: solid 1px #d8d8d8;</span></span><br><span class="line"><span class="undefined">        background: #e4e4e4;</span></span><br><span class="line"><span class="undefined">        padding: 0px 0px 0px 5px;</span></span><br><span class="line"><span class="undefined">        line-height: 30px;</span></span><br><span class="line"><span class="undefined">        min-height: 30px;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        margin-bottom: 5px;</span></span><br><span class="line"><span class="undefined">        margin-right: 5px;</span></span><br><span class="line"><span class="undefined">        cursor: default;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .edit-content .item:hover &#123;</span></span><br><span class="line"><span class="undefined">        background: #def0ff;</span></span><br><span class="line"><span class="undefined">        border-color: #aad8ff;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .edit-content .item.active &#123;</span></span><br><span class="line"><span class="undefined">        background: #0066cc;</span></span><br><span class="line"><span class="undefined">        border-color: #0066cc;</span></span><br><span class="line"><span class="undefined">        color: #fff;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .edit-content .item cite &#123;</span></span><br><span class="line"><span class="undefined">        font-style: normal;</span></span><br><span class="line"><span class="undefined">        font-size: 18px;</span></span><br><span class="line"><span class="undefined">        float: right;</span></span><br><span class="line"><span class="undefined">        line-height: 18px;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">        width: 18px;</span></span><br><span class="line"><span class="undefined">        height: 18px;</span></span><br><span class="line"><span class="undefined">        cursor: pointer;</span></span><br><span class="line"><span class="undefined">        margin: 5px 5px 0px 5px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .edit-content .item cite:hover &#123;</span></span><br><span class="line"><span class="undefined">        background: #0066cc;</span></span><br><span class="line"><span class="undefined">        color: #fff;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://code.jquery.com/jquery-latest.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">'addField'</span>&gt;</span>add</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">'getMessage'</span>&gt;</span>getmessage</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">contenteditable</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"edit-content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> msgeditor = &#123;</span></span><br><span class="line"><span class="undefined">        /**</span></span><br><span class="line"><span class="undefined">         * 字段列表</span></span><br><span class="line"><span class="javascript">         * @type &#123;<span class="built_in">Array</span>&#125;</span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="undefined">        fields: [</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">text</span>: <span class="string">"房间简称"</span>, <span class="attr">value</span>: <span class="string">"ShortRoomInfo"</span> &#125;,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">text</span>: <span class="string">"款项名称"</span>, <span class="attr">value</span>: <span class="string">"ItemName"</span> &#125;,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">text</span>: <span class="string">"余额"</span>, <span class="attr">value</span>: <span class="string">"RmbYe"</span> &#125;,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">text</span>: <span class="string">"逾期天数"</span>, <span class="attr">value</span>: <span class="string">"OverDay"</span> &#125;,</span></span><br><span class="line"><span class="undefined">        ],</span></span><br><span class="line"><span class="undefined">        /**</span></span><br><span class="line"><span class="undefined">         * 初始化</span></span><br><span class="line"><span class="javascript">         * @<span class="keyword">return</span> &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="javascript">        init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.reminderContent = $(<span class="string">".edit-content"</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.btnAddField = $(<span class="string">".addField"</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.getMessage = $(<span class="string">".getMessage"</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.setContent(<span class="string">"【欠款提醒】&#123;ShortRoomInfo&#125;，&#123;ItemName&#125;  &#123;RmbYe&#125;元，逾期&#123;OverDay&#125;天。"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.ieFix() <span class="comment">//修复IE下兼容性问题</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.bindEvent()</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        /**</span></span><br><span class="line"><span class="undefined">         * 获取一个随机整数</span></span><br><span class="line"><span class="undefined">         * @param  &#123;[type]&#125; max [description]</span></span><br><span class="line"><span class="javascript">         * @<span class="keyword">return</span> &#123;[type]&#125;     [description]</span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="javascript">        getRandomInt: <span class="function"><span class="keyword">function</span>(<span class="params">max</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="built_in">Math</span>.floor(max));</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        /**</span></span><br><span class="line"><span class="undefined">         * 绑定事件</span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="javascript">        bindEvent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> me = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//绑定内容区域的按键事件</span></span></span><br><span class="line"><span class="javascript">            me.reminderContent.on(<span class="string">"click"</span>, <span class="string">"i"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="comment">//删除按钮事件</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.parentNode.remove()</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="comment">//添加</span></span></span><br><span class="line"><span class="javascript">            me.btnAddField.on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </span></span><br><span class="line"><span class="undefined">                me.addFieldToContent(me.fields[me.getRandomInt(me.fields.length)])</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取消息</span></span></span><br><span class="line"><span class="javascript">            me.getMessage.on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </span></span><br><span class="line"><span class="javascript">               $(<span class="string">".msg"</span>).html(me.getContent()) </span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        /**</span></span><br><span class="line"><span class="undefined">         * 判断是否是ie浏览器</span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="javascript">        isIE: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (!!<span class="built_in">window</span>.ActiveXObject || <span class="string">"ActiveXObject"</span> <span class="keyword">in</span> <span class="built_in">window</span>)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        /**</span></span><br><span class="line"><span class="undefined">         * 修复contenteditable的Ie兼容性问题</span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="javascript">        ieFix: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="keyword">this</span>.isIE() === <span class="literal">false</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">document</span>).on(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> selection = <span class="built_in">window</span>.getSelection()</span></span><br><span class="line"><span class="javascript">                <span class="comment">//不可编辑元素内禁用键盘</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (selection &amp;&amp; selection.focusNode) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> contentEditable = selection.focusNode.contentEditable || selection.focusNode.parentNode.contentEditable;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (contentEditable == <span class="string">"false"</span> &amp;&amp; e.keyCode != <span class="number">8</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">//如果此时按下了退格键，且前一个元素是无法编辑的元素（通常是x按钮），则直接整个删除（触发删除事件）</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//如果当前元素的前一个元素是无法编辑的元素，或者父元素是无法编辑的元素，都要直接删除</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//策略：首先尝试触发click，然后触发删除。</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (e.keyCode == <span class="number">8</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    $(selection.focusNode.parentNode.contentEditable == <span class="string">"false"</span> &amp;&amp; selection.focusNode.parentNode).click();</span></span><br><span class="line"><span class="javascript">                    $(selection.focusNode.contentEditable == <span class="string">"false"</span> &amp;&amp; selection.focusNode).click();</span></span><br><span class="line"><span class="javascript">                    $(selection.focusNode.parentNode.contentEditable == <span class="string">"false"</span> &amp;&amp; selection.focusNode.parentNode).remove();</span></span><br><span class="line"><span class="javascript">                    $(selection.focusNode.previousSibling &amp;&amp; selection.focusNode.previousSibling.contentEditable == <span class="string">"false"</span> &amp;&amp; selection.anchorOffset == <span class="number">0</span> &amp;&amp; selection.focusNode.previousSibling).remove();</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.keyCode == <span class="number">46</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//不允许使用del按键</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        /**</span></span><br><span class="line"><span class="undefined">         * 获取消息内容</span></span><br><span class="line"><span class="undefined">         * @returns &#123;*&#125;</span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="javascript">        getContent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> me = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> msg = me.reminderContent.text();</span></span><br><span class="line"><span class="javascript">            me.fields.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">field</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(field.text + <span class="string">"x"</span>, <span class="string">"g"</span>);</span></span><br><span class="line"><span class="javascript">                msg = msg.replace(reg, <span class="string">"&#123;"</span> + field.value + <span class="string">"&#125;"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> msg;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        /**</span></span><br><span class="line"><span class="undefined">         * 设置消息内容</span></span><br><span class="line"><span class="undefined">         * @param msg</span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="javascript">        setContent: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> me = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> msgresult = msg;</span></span><br><span class="line"><span class="xml">            //var msgresult = "<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">'editor-text'</span>&gt;</span>【应收款】<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;ShortRoomInfo&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">'editor-text'</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;ItemName&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">'editor-text'</span>&gt;</span>逾期已达<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;OverDay&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">'editor-text'</span>&gt;</span>，请关注！<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;RmbYe&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">'editor-text'</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>";</span></span><br><span class="line"><span class="javascript">            me.fields.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">field</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"&#123;"</span> + field.value + <span class="string">"&#125;"</span>, <span class="string">"g"</span>);</span></span><br><span class="line"><span class="undefined">                msgresult = msgresult.replace(reg,</span></span><br><span class="line"><span class="xml">                    "<span class="tag">&lt;<span class="name">span</span> <span class="attr">contenteditable</span>=<span class="string">'false'</span>&gt;</span>" + field.text + "<span class="tag">&lt;<span class="name">i</span> <span class="attr">contenteditable</span>=<span class="string">'false'</span>&gt;</span>x<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>");</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">            me.reminderContent.html(msgresult);</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        /**</span></span><br><span class="line"><span class="undefined">         * 向消息内容中添加字段</span></span><br><span class="line"><span class="undefined">         * @param field</span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="javascript">        addFieldToContent: <span class="function"><span class="keyword">function</span>(<span class="params">field</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> me = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="xml">            var html = " <span class="tag">&lt;<span class="name">span</span> <span class="attr">contenteditable</span>=<span class="string">'false'</span>&gt;</span>" + field.text + "<span class="tag">&lt;<span class="name">i</span> <span class="attr">contenteditable</span>=<span class="string">'false'</span>&gt;</span>x<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> ";</span></span><br><span class="line"><span class="undefined">            me.reminderContent.append(html);</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        msgeditor.init();</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近工作中需要实现一个预编辑短信的编辑器&lt;br&gt;可以输入&lt;br&gt;可以添加字段&lt;br&gt;可以删除字段&lt;br&gt;最终可以生成一个短信消息模板字符串&lt;br&gt;如图：&lt;br&gt;&lt;img src=&quot;/images/msgeditor/msg-editor.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a
      
    
    </summary>
    
    
      <category term="js" scheme="http://zongzijie.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>SqlServer性能优化</title>
    <link href="http://zongzijie.github.io/2019/07/03/sql-performance-optimization/"/>
    <id>http://zongzijie.github.io/2019/07/03/sql-performance-optimization/</id>
    <published>2019-07-03T15:45:54.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<p>##### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##### &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="性能优化" scheme="http://zongzijie.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="mssql" scheme="http://zongzijie.github.io/tags/mssql/"/>
    
      <category term="sql" scheme="http://zongzijie.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>二维码扫描枪中文乱码问题终极解决方案</title>
    <link href="http://zongzijie.github.io/2019/06/30/qrcode-scan-chinese/"/>
    <id>http://zongzijie.github.io/2019/06/30/qrcode-scan-chinese/</id>
    <published>2019-06-30T21:05:06.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>二维码（内容是，英文字母加数字）扫描时在PC端是需要一个扫描枪来用红外识别的，此扫描枪其实实在模拟键盘输入，相当于就是个键盘。<br>场景要求：同一个输入框，用户既可以手动录入中文，也能接着就扫描。<br>问题来了：</p><ol><li>输入中文时必然是中文输入法，所以网友说的禁止输入中文的方法行不通。</li><li>如果输入了中文，再扫码，必然会出现模拟键盘输入，将二维码中的英文字母和数字合并成中文输出到表单中</li><li>扫码枪都没有驱动也没有独立的事件，无法通过事件去区分扫码还是键盘输入，故而无法去做响应。</li><li>所以我们的核心目标就是需要模拟一个二维码扫描事件，这个事件能够在触发时告诉我二维码的真实内容，然后就可以拿着这个真实内容去干活了，而不用考虑输入法的干扰。（干活后还能回来将这写中文内容替换成二维码内容，提升用户视觉体验）</li></ol><p>预期效果：</p><ol><li>用户输入完中文，搜索无果后，马上想到扫码快速解决问题，这时不用清空输入框，也不用切换输入法，直接拿起扫描枪就扫二维码，滴，1秒出结果。</li><li>扫描第一张二维码之后，继续扫第二张，第三张…..中途无需清空输入框</li></ol><p>解决思路：</p><ol><li>确定一个二维码的业务规则，如：是否包含数字，是否包含字母，二维码的固定长度，需要精确到能够识别出来这是否是一个二维码，这个很关键，决定了这个方案的可用性，总不能所有二维码都可以扫。</li><li>扫码就是键盘输入，那么一定会触发键盘抬起事件keyup,利用这个事件去记录实际按下的英文按键字符串，形成一个真实的二维码内容</li><li>检测键盘按下和抬起的速度，扫码枪的按下和抬起的间隔都在70ms以下，所以可以根据这个时间来粗暴的判断单次按键是扫描枪扫描的还是手动输入的。</li><li>当然手动输入也可以低于70ms，但是稳定且持续到二维码全都输入完成，也是很小的机率，即便出现了，还有最后一道防线，二维码规则不对的也不会算作扫码。</li><li>根据以上的所有条件即可精确判断出(99%)是否是扫描的二维码，那么也就可以模拟一个二维码扫描的事件出来了。</li><li>有了二维码扫描事件，就可以拿着这个响应事件中的二维码内容去干活了。</li></ol><p>jquery插件已写好，需要的自取<br>使用示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听扫描抢输入</span></span><br><span class="line"><span class="keyword">var</span> me=<span class="keyword">this</span>;</span><br><span class="line">me.$searchInput.startListen(&#123;</span><br><span class="line">    show : <span class="function"><span class="keyword">function</span>(<span class="params">code</span>)</span>&#123;</span><br><span class="line">        me.btnSearchEvt(code).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//中文输入法完成后输入到文本框这个中间会有延迟，这里需要延后替换，不然会被输入法覆盖。</span></span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//为了保证查询的结果是输入框上的二维码对应的内容，保证最终一致性</span></span><br><span class="line">                me.$searchInput.val(code);</span><br><span class="line">            &#125;, <span class="number">500</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.clearRealKeys();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>插件代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> barcode = &#123;</span><br><span class="line">        functionalKeyArray : [<span class="number">9</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">45</span>, <span class="number">36</span>, <span class="number">33</span>,<span class="number">32</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">144</span>, <span class="number">19</span>, <span class="number">145</span>, <span class="number">40</span>, <span class="number">38</span>, <span class="number">27</span>], <span class="comment">//键盘上功能键键值数组</span></span><br><span class="line">        listenerObj: <span class="literal">null</span>,</span><br><span class="line">        letter: <span class="literal">false</span>,</span><br><span class="line">        number: <span class="literal">true</span>,</span><br><span class="line">        check: <span class="literal">true</span>,</span><br><span class="line">        realKeys:<span class="string">""</span>,</span><br><span class="line">        <span class="comment">/* 一次按键时间间隔 */</span></span><br><span class="line">        oneKeyTime: <span class="string">''</span>,</span><br><span class="line">        <span class="comment">/* 两次按键时间间隔 */</span></span><br><span class="line">        twoKeyTime: <span class="string">''</span>,</span><br><span class="line">        <span class="comment">/* 键按下的时间    */</span></span><br><span class="line">        keyDownTime: <span class="string">''</span>,</span><br><span class="line">        <span class="comment">/* 条形码长度      */</span></span><br><span class="line">        barcodeLen: <span class="number">8</span>,</span><br><span class="line">        <span class="comment">/* 一次按键按下到释放的时间间隔 */</span></span><br><span class="line">        spanTime: <span class="number">80</span>,</span><br><span class="line">        <span class="comment">/* 零的key值      */</span></span><br><span class="line">        zerokeyVal: <span class="number">48</span>,</span><br><span class="line">        <span class="comment">/* 数字9的key值   */</span></span><br><span class="line">        ninekeyVal: <span class="number">57</span>,</span><br><span class="line">        <span class="comment">/* a的key值      */</span></span><br><span class="line">        akeyVal: <span class="number">65</span>,</span><br><span class="line">        <span class="comment">/* z的key值      */</span></span><br><span class="line">        zkeyVal: <span class="number">90</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 展示扫描结果</span></span><br><span class="line"><span class="comment">         * @return &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 校验手动输入</span></span><br><span class="line"><span class="comment">         * @return &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        checkHandInput: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.oneKeyTime &gt; <span class="keyword">this</span>.spanTime) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 键盘开始按下</span></span><br><span class="line"><span class="comment">         * @return &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        on_key_down: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// var that = this;</span></span><br><span class="line">            <span class="comment">// this.listenerObj.keydown(function(e) &#123;</span></span><br><span class="line">            <span class="comment">//    </span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 键盘抬起</span></span><br><span class="line"><span class="comment">         * @return &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        on_key_up: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">this</span>.listenerObj.keyup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//不管如何,记录按键,最终以记录的按键为准.</span></span><br><span class="line">                that.recordKeys(e);</span><br><span class="line">                <span class="comment">//过滤掉二维码里面的回车,统一由扫描插件回调后代码统一处理后续业务.避免重复触发(回车后触发业务很常见,所以扫描枪自带回车,二维码自带的回车都要屏蔽掉)</span></span><br><span class="line">                <span class="keyword">if</span>(e.keyCode===<span class="number">13</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">                <span class="keyword">var</span> keyUpTime = d.getTime();</span><br><span class="line"></span><br><span class="line">                that.oneKeyTime = <span class="built_in">parseInt</span>(keyUpTime) - <span class="built_in">parseInt</span>(that.keyDownTime);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> isHand = that.checkHandInput();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//是手动输入则不做默认处理，但是要清空按键记录，避免用户先手动按键，再扫描二维码的场景下，将两个按键记录拼接后导致查询不出来结果。</span></span><br><span class="line">                <span class="keyword">if</span> (that.check &amp;&amp; isHand &amp;&amp; that.in_range(e.which)) &#123;</span><br><span class="line">                    that.clearRealKeys();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (that.check &amp;&amp; !isHand &amp;&amp; that.check_barcode()) &#123;</span><br><span class="line">                    <span class="comment">//说明是非手动输入，则直接将记录的按键填充到输入框中，无视客户端的输入法。</span></span><br><span class="line">                    that.createListEl();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 键盘已经按下</span></span><br><span class="line"><span class="comment">         * @return &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        on_key_press: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//var that = this;</span></span><br><span class="line">            <span class="comment">// this.listenerObj.keypress(function(e) &#123;</span></span><br><span class="line">            <span class="comment">//     if (e.which == 13 &amp;&amp; that.check_barcode()) &#123;</span></span><br><span class="line">            <span class="comment">//         that.createListEl();</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 记录按键</span></span><br><span class="line"><span class="comment">         * @param e</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        recordKeys:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> that=<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            <span class="keyword">var</span> curTime = <span class="built_in">parseInt</span>(d.getTime());</span><br><span class="line">            <span class="keyword">if</span> (that.keyDownTime !== <span class="string">''</span> &amp;&amp; _.isNaN(that.keyDownTime)==<span class="literal">false</span>) &#123;</span><br><span class="line">                that.twoKeyTime = curTime - that.keyDownTime;</span><br><span class="line">            &#125;</span><br><span class="line">            that.keyDownTime = curTime;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//过滤掉功能按键，包括空格和换行</span></span><br><span class="line">            <span class="keyword">if</span>(that.functionalKeyArray.some(<span class="function"><span class="keyword">function</span>(<span class="params">k</span>)</span>&#123;<span class="keyword">return</span> k===e.keyCode&#125;))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果是中文输入法，则需要记录真实按键</span></span><br><span class="line">            <span class="keyword">if</span>(e.keyCode===<span class="number">229</span>)&#123;</span><br><span class="line">                <span class="comment">//e.originalEvent.code 有可能未定义，此时尝试获取key</span></span><br><span class="line">                <span class="keyword">if</span>(!e.originalEvent)<span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">var</span> code=e.originalEvent.code||e.originalEvent.key||<span class="string">""</span>;</span><br><span class="line">                <span class="keyword">var</span> key=code.replace(<span class="string">"Key"</span>,<span class="string">""</span>).replace(<span class="string">"Digit"</span>,<span class="string">""</span>).replace(<span class="string">"NumPad"</span>,<span class="string">""</span>);</span><br><span class="line">                <span class="keyword">var</span> realkey=that.keyMap[key];</span><br><span class="line">                key=realkey===<span class="literal">undefined</span>?key:realkey;</span><br><span class="line">                that.realKeys+=key;</span><br><span class="line">                <span class="built_in">console</span>.log(that.realKeys);</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//按下退格键，清空按键记录</span></span><br><span class="line">            <span class="keyword">if</span>(e.keyCode===<span class="number">8</span>)&#123;</span><br><span class="line">                that.clearRealKeys();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            that.realKeys= that.realKeys+e.key;</span><br><span class="line">            <span class="built_in">console</span>.log(that.realKeys)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 校验条码结果是否满足条件</span></span><br><span class="line"><span class="comment">         * @return &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        check_barcode: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> code = <span class="keyword">this</span>.realKeys;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (code.length !== <span class="keyword">this</span>.barcodeLen) &#123;</span><br><span class="line">                <span class="comment">//$(this.listenerObj).val("").focus();</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">// layer.msg('条形码不合法',&#123;time : 800&#125;);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断按下的键是否在字母加数字这个范围</span></span><br><span class="line"><span class="comment">         * @param  &#123;[type]&#125; key [description]</span></span><br><span class="line"><span class="comment">         * @return &#123;[type]&#125;     [description]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        in_range: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> isLegal = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.number) &#123;</span><br><span class="line">                isLegal = <span class="keyword">this</span>.is_number(key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.letter) &#123;</span><br><span class="line">                isLegal = <span class="keyword">this</span>.is_letter(key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.number &amp;&amp; <span class="keyword">this</span>.letter) &#123;</span><br><span class="line">                isLegal = <span class="keyword">this</span>.is_number || <span class="keyword">this</span>.is_letter ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> isLegal;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 按钮是否是数字</span></span><br><span class="line"><span class="comment">         * @param  &#123;[type]&#125;  key [description]</span></span><br><span class="line"><span class="comment">         * @return &#123;Boolean&#125;     [description]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        is_number: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (key &gt; <span class="keyword">this</span>.ninekeyVal || key &lt; <span class="keyword">this</span>.zerokeyVal) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 按钮是否是字母</span></span><br><span class="line"><span class="comment">         * @param  &#123;[type]&#125;  key [description]</span></span><br><span class="line"><span class="comment">         * @return &#123;Boolean&#125;     [description]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        is_letter: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (key &gt; <span class="keyword">this</span>.zkeyVal || key &lt; <span class="keyword">this</span>.akeyVal) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 校验是否联网</span></span><br><span class="line"><span class="comment">         * @return &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        check_network: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//return navigator.onLine ? true : false;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建扫描结果</span></span><br><span class="line"><span class="comment">         * @return &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        createListEl: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.show == <span class="string">'function'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.show(<span class="keyword">this</span>.realKeys);</span><br><span class="line">                <span class="comment">// layer.msg('扫描成功',&#123;time:1000&#125;);</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//layer.msg('no callback function');</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//this.listenerObj.val("").focus();</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 清空按键记录</span></span><br><span class="line"><span class="comment">         * @return &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        clearRealKeys: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.realKeys=<span class="string">""</span>;</span><br><span class="line">            <span class="comment">//console.log("clearRealKeys.")</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 保持激活输入框</span></span><br><span class="line"><span class="comment">         * @return &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        keepFocusInput: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.listenerObj.blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> that = $(<span class="keyword">this</span>);</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    that.focus().select();</span><br><span class="line">                &#125;, <span class="number">100</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 开始监听</span></span><br><span class="line"><span class="comment">         * @param  &#123;[type]&#125; listenerObj [description]</span></span><br><span class="line"><span class="comment">         * @param  &#123;[type]&#125; settings    [description]</span></span><br><span class="line"><span class="comment">         * @return &#123;[type]&#125;             [description]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        startListen: <span class="function"><span class="keyword">function</span>(<span class="params">listenerObj, settings</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> member <span class="keyword">in</span> settings) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> barcode[member] !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">                    barcode[member] = settings[member];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            barcode.listenerObj = listenerObj;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.on_key_down();</span><br><span class="line">            <span class="keyword">this</span>.on_key_up();</span><br><span class="line">            <span class="keyword">this</span>.on_key_press();</span><br><span class="line">            <span class="comment">//this.keepFocusInput();</span></span><br><span class="line">            <span class="keyword">this</span>.listenerObj.focus().select();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    $.fn.startListen = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> settings = $.extend(&#123;</span><br><span class="line">            barcodeLen :<span class="number">76</span>,</span><br><span class="line">            letter : <span class="literal">true</span>,<span class="comment">//允许有字母</span></span><br><span class="line">            number : <span class="literal">true</span>,<span class="comment">//允许有数字</span></span><br><span class="line">            check  : <span class="literal">true</span></span><br><span class="line">        &#125;, options);</span><br><span class="line">        <span class="comment">//设置微软自带中文输入法下的key为标准key</span></span><br><span class="line">        barcode.keyMap=$.extend(&#123;</span><br><span class="line">            <span class="string">"Comma"</span>:<span class="string">","</span>,<span class="comment">//微软输入法逗号关键字替换</span></span><br><span class="line">            <span class="string">"Minus"</span>:<span class="string">"-"</span>,<span class="comment">//微软输入法关键字替换</span></span><br><span class="line">            <span class="string">"Enter"</span>:<span class="string">""</span>,<span class="comment">//微软输入法关键字忽略</span></span><br><span class="line">            <span class="string">"ShiftLeft"</span>:<span class="string">""</span>,<span class="comment">//微软输入法关键字忽略</span></span><br><span class="line">            <span class="string">"ArrowDown"</span>:<span class="string">""</span>,<span class="comment">//windows搜狗中文输入法忽略</span></span><br><span class="line">            <span class="string">"Space"</span>:<span class="string">""</span><span class="comment">//windows搜狗中文输入法忽略</span></span><br><span class="line">        &#125;, options.keyMap);</span><br><span class="line">        barcode.startListen(<span class="keyword">this</span>, settings);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;二维码（内容是，英文字母加数字）扫描时在PC端是需要一个扫描枪来用红外识别的，此扫描枪其实实在模拟键盘输入，相当于就是个键盘
      
    
    </summary>
    
    
      <category term="二维码" scheme="http://zongzijie.github.io/tags/%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>性能优化-嵌套循环</title>
    <link href="http://zongzijie.github.io/2019/03/19/performance-optimization/"/>
    <id>http://zongzijie.github.io/2019/03/19/performance-optimization/</id>
    <published>2019-03-19T13:23:32.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法的质量很大程度上取决于执行速度，也就是平时提到的性能，大O复杂度表示法可以在不运行算法情况下从代码分析的角度很准确的分析出算法的瓶颈。"><a href="#算法的质量很大程度上取决于执行速度，也就是平时提到的性能，大O复杂度表示法可以在不运行算法情况下从代码分析的角度很准确的分析出算法的瓶颈。" class="headerlink" title="算法的质量很大程度上取决于执行速度，也就是平时提到的性能，大O复杂度表示法可以在不运行算法情况下从代码分析的角度很准确的分析出算法的瓶颈。"></a>算法的质量很大程度上取决于执行速度，也就是平时提到的性能，大O复杂度表示法可以在不运行算法情况下从代码分析的角度很准确的分析出算法的瓶颈。</h3><ul><li>下面有一段很简单的代码，我们用大O复杂度表示法，来分析下他的执行效率<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>假设每一行的执行时间都一样，为：<strong>unit_time</strong></p><p>观察上面的代码</p><p>第2、3行代码分别需要1个<strong>unit_time</strong></p><p>第4、5行运行了n遍，所以需要<strong>2*n个unit_time</strong></p><p>所以上面的代码总执行时间为<strong>T(n)=(2n+2)*unit_time</strong></p><ul><li>再看第二段代码：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; j &lt;= n; ++j) &#123;</span><br><span class="line">      sum = sum +  i * j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>根据刚刚讲的逻辑，可以得出，此段代码的执行时间是</p><p>T(n) = (2n^2+2n+3)*unit_time</p><p>前人已经给我们总结了大O的公式</p><h4 id="T-n-O-f-n"><a href="#T-n-O-f-n" class="headerlink" title="T(n)=O(f(n))"></a>T(n)=O(f(n))</h4><p>f(n) 表示每行代码执行的次数总和</p><p>所以可以得出</p><p>第一段代码的时间复杂度大O表示法为：<strong>O(2n+2)</strong></p><p>第二段代码的时间复杂度大O表示法为：<strong>O(2n^2+2n+3)</strong></p><p>在分析时间复杂度时我们只需要关注循环的那一段</p><p>所以可以简化为</p><p>第一段：<strong>O(n)，线性复杂度</strong></p><p>第二段：<strong>O(n^2)，指数阶复杂度</strong></p><p>不难看出，嵌套循环对性能的影响是巨大的，更别说3层和4层嵌套了。</p><p>我们在性能优化时，更多的应该去关注循环语句，将循环次数和层数降下来，性能自然就会变优</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算法的质量很大程度上取决于执行速度，也就是平时提到的性能，大O复杂度表示法可以在不运行算法情况下从代码分析的角度很准确的分析出算法的瓶颈。&quot;&gt;&lt;a href=&quot;#算法的质量很大程度上取决于执行速度，也就是平时提到的性能，大O复杂度表示法可以在不运行算法情况下从代码
      
    
    </summary>
    
    
      <category term="性能优化" scheme="http://zongzijie.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>熵增感悟</title>
    <link href="http://zongzijie.github.io/2019/03/09/shangzenglilun/"/>
    <id>http://zongzijie.github.io/2019/03/09/shangzenglilun/</id>
    <published>2019-03-09T13:01:54.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变得复杂是必然，变得简单是目标"><a href="#变得复杂是必然，变得简单是目标" class="headerlink" title="变得复杂是必然，变得简单是目标"></a>变得复杂是必然，变得简单是目标</h1><p>熵增原理：熵增原理就是孤立热力学系统的熵不减少，总是增大或者不变。</p><p>在统计学意义上，熵度量的是系统的无序度，也就是说，系统越杂乱无章，它的熵值越大。</p><p>那么一个系统的无序度何时最大呢，答案是系统达到宏观平衡时。举个例子，一间长时间无人照料的屋子一定会越来越脏，在没有外界干扰的情况下，每一粒灰尘都会无序的落到任何角落，最终会变成一层灰。如果此时有个人（小明）打扫，熵就会减少，无序度就会减少，屋子就会变得有序，但是小明由于打扫出汗发热了，小明本身的无序度增加了，热力学第二定律提出了“孤立系统”的概念，在这个例子中，“小明和屋子”这个孤立系统在小明打扫屋子的过程中消耗体力产生热量导致了这个孤立系统整体的熵值增加，虽然屋子变的有序（熵值减少），但是小明却变得无序（熵增），熵增定律（孤立系统的熵值智能增加不能减少）所以在没有外力对“小明和屋子”这个孤立系统做功时，它的熵值是不会减少的，那么如何对这个系统做功呢，答案很简单，小明吃东西喝水的过程就是外界对小明和屋子做功的过程，小明摄取外界的有序能量，增加了系统的有序度。</p><p>那么回到现实，我们的系统一定会越来越复杂，这是熵增定律导致的必然结果。</p><h1 id="如何让系统越有序和简单呢？"><a href="#如何让系统越有序和简单呢？" class="headerlink" title="如何让系统越有序和简单呢？"></a>如何让系统越有序和简单呢？</h1><p>答案是做功。</p><p>学习，改进，设计，优化，用行业最佳实践，先进理论，来迭代改造我们的系统和企业，这些都是在对咱们的系统做功。</p><p>只要不断对系统做功，熵值就会持续减少，变得有序和简单。</p><p>所以咱们没有必要去抱怨系统以及生活甚至是世界为什么会变得越来越复杂，因为这是必然，我们要做的就是与熵增抗争，牛逼的人是熵值低的人，牛逼的团队熵值也必然是很低的，只要我们一起携手，利用每个人身边的能量来对咱们的系统做功。我们的工作生活都会变得越来越有序和简单。</p><h1 id="生命是否也是如此"><a href="#生命是否也是如此" class="headerlink" title="生命是否也是如此"></a>生命是否也是如此</h1><p>生于混沌，死于混沌，成长的过程就是从混沌开始不断对自身做功（吃喝拉撒学习工作生活）来使自己的孤立系统熵值降低变得有序，变老的过程就是孤立系统渐渐趋于稳定最终归于混沌。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;变得复杂是必然，变得简单是目标&quot;&gt;&lt;a href=&quot;#变得复杂是必然，变得简单是目标&quot; class=&quot;headerlink&quot; title=&quot;变得复杂是必然，变得简单是目标&quot;&gt;&lt;/a&gt;变得复杂是必然，变得简单是目标&lt;/h1&gt;&lt;p&gt;熵增原理：熵增原理就是孤立热力学系统
      
    
    </summary>
    
    
      <category term="熵" scheme="http://zongzijie.github.io/tags/%E7%86%B5/"/>
    
  </entry>
  
  <entry>
    <title>我们应该如何保证代码质量</title>
    <link href="http://zongzijie.github.io/2019/01/23/code-isolation/"/>
    <id>http://zongzijie.github.io/2019/01/23/code-isolation/</id>
    <published>2019-01-23T12:49:27.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="人"><a href="#人" class="headerlink" title="人"></a>人</h1><ul><li>思想：<br>提前思考如何避免低质量代码，并不断总结保持初心，觉得写低质量代码是耻辱。<br>持续不断的寻找代码质量与时间成本的平衡点，保持敬畏心，保持对高质量代码的不断追求的进取心。</li><li>素质：<br>保持对低质量代码敏感度，有洁癖，不妥协与进度和时间的压力<br>代码是会腐烂的，持续学习，勇敢的重构陈旧腐烂的代码，不要等爆炸后再来补救。</li><li>技能：<br>熟练代码设计能力，80%设计 20%编码<br>熟练重构低质量代码提高可读性以及可维护性，增加代码复用率<br>善于发现代码质量隐患</li></ul><h1 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h1><ul><li>团队高度统一的对代码质量足够重视。<br>不能只是停留在嘴上说要保证代码质量，但是还是在无视各种代码质量活动，我私下做过一个调查，80%的人都认为CodeReview之所以难以推行是因为“没时间”，但在我看来，真正阻碍我们的是“对低质量代码治理的决心”，咱们的团队把80%的时间都花在被动苦干治理（改BUG，代码腐烂之后重构）低质量代码上了，而对于可以预防低质量代码的提前思考的手段（Code Review 单测 代码详细设计）很轻视。这说明咱们并不是没时间，只是咱们从小所受的教育使我们“勤于苦干，懒于思考”。</li><li>代码隔离，保护<br>保证代码质量的基础手段，都在一个锅里吃饭很容易交叉感染，保持对代码的隔离也是团队保持对代码敬畏的一个最基本手段。<br>结对编程：碰到不确定和复杂问题时一定要结对编程，既可以提高编程效率，也可以填补单人认知不足导致的不必要的代码缺陷引入。</li><li>TDD<br>测试驱动开发，单测先行,也是需要从团队基因和思想层面改进的东西，事后补单测的行为只能发挥单测20%的价值。单测不光是为了覆盖率和报告，单测是开发阶段质量保证手段，也是支撑重构的保证。没有单测保证，CodeReview后的重构完全是在走钢丝，很容易就摔死了。<br>Code Review：无处不在，不应该排任务，也不应该去量化，这件事情是每个工程师的基本责任，也是团队文化，随时看见烂代码和坏味道都应该勇敢的指出并大胆重构小心测试。前提是需要完整的单元测试来保证质量。</li></ul><h1 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h1><p>工具是目前最容易发力的地方，见效快，但也很有限，真正能够保证代码质量的还是在“人”和“团队”这两个方面。</p><ul><li>GitLab merge request 做代码隔离<br><img src="/images/code-isolation/FlowchartDiagram1.png" alt=""></li><li>Start UML提前做好实现方案设计，并通过团队和架构师的评审</li><li>XUnit 做全业务场景覆盖的单元测试，支撑日后的不断重构优化</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;人&quot;&gt;&lt;a href=&quot;#人&quot; class=&quot;headerlink&quot; title=&quot;人&quot;&gt;&lt;/a&gt;人&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;思想：&lt;br&gt;提前思考如何避免低质量代码，并不断总结保持初心，觉得写低质量代码是耻辱。&lt;br&gt;持续不断的寻找代码质量与时间成本的平衡点，
      
    
    </summary>
    
    
      <category term="GitLab" scheme="http://zongzijie.github.io/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>深入理解C#可空类型Nullable&lt;T&gt;</title>
    <link href="http://zongzijie.github.io/2018/11/23/nullable/"/>
    <id>http://zongzijie.github.io/2018/11/23/nullable/</id>
    <published>2018-11-23T13:35:55.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<p>花时间研究了下C#的源码，发现了点一起不清晰的东西，分享出来</p><h1 id="问题1：int-i-null-为什么可以把null赋值给值类型"><a href="#问题1：int-i-null-为什么可以把null赋值给值类型" class="headerlink" title="问题1：int? i =null;为什么可以把null赋值给值类型"></a>问题1：int? i =null;为什么可以把null赋值给值类型</h1><h2 id="首先，并不存在可为空的值类型"><a href="#首先，并不存在可为空的值类型" class="headerlink" title="首先，并不存在可为空的值类型"></a>首先，并不存在可为空的值类型</h2><p>可为空的值类型<br>Nullable<t>只是在逻辑层面上实现了把null赋值给值类型，给人一种值类型可为null的感觉。<br>Nullable<t> 是一个结构体，内部有两个成员，public bool HasValue 和 private innerValue</t></t></p><p>int? i =null;<br>代码做了1件事<br>1.判断赋值为null时直接返回new Nullable<int>();</int></p><p>CLR在对Nullable<t>实例执行装箱操作时首先检查它是否为null，若为null则CLR不装箱任何东西而是直接返回null；若实例的值不是null则获取该实例的值（Value属性）并对这个值进行装箱操作</t></p><h1 id="问题2-int-i-3-i-GetType-为什么返回-int32"><a href="#问题2-int-i-3-i-GetType-为什么返回-int32" class="headerlink" title="问题2: int? i = 3;  i.GetType();//为什么返回 int32"></a>问题2: int? i = 3;  i.GetType();//为什么返回 int32</h1><p>Nullable<t> 并没有重写GetType方法，所以在调用GetType之前会先装箱到Object<br>相当于 int? i=3; object a=i; a.GetType();<br>所以是Int32</t></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;花时间研究了下C#的源码，发现了点一起不清晰的东西，分享出来&lt;/p&gt;
&lt;h1 id=&quot;问题1：int-i-null-为什么可以把null赋值给值类型&quot;&gt;&lt;a href=&quot;#问题1：int-i-null-为什么可以把null赋值给值类型&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="Nulable&lt;T&gt;" scheme="http://zongzijie.github.io/tags/Nulable-T/"/>
    
      <category term="可空类型" scheme="http://zongzijie.github.io/tags/%E5%8F%AF%E7%A9%BA%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Promise 本质上是一个有限状态机</title>
    <link href="http://zongzijie.github.io/2018/09/05/promise/"/>
    <id>http://zongzijie.github.io/2018/09/05/promise/</id>
    <published>2018-09-05T18:42:41.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/zh-hans/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA" target="_blank" rel="noopener">状态机是什么？</a><br><img src="/images/promise/finite-state-machine.png" alt=""></p><h1 id="promise本质上是一个有限状态机，将下列代码粘贴到任何一个支持ES6的浏览器下都可以正常使用，与本来的promise使用方法没有区别-下面是具体的代码。代码很短，但能完整诠释Promise原理。"><a href="#promise本质上是一个有限状态机，将下列代码粘贴到任何一个支持ES6的浏览器下都可以正常使用，与本来的promise使用方法没有区别-下面是具体的代码。代码很短，但能完整诠释Promise原理。" class="headerlink" title="promise本质上是一个有限状态机，将下列代码粘贴到任何一个支持ES6的浏览器下都可以正常使用，与本来的promise使用方法没有区别,下面是具体的代码。代码很短，但能完整诠释Promise原理。"></a>promise本质上是一个有限状态机，将下列代码粘贴到任何一个支持ES6的浏览器下都可以正常使用，与本来的promise使用方法没有区别,下面是具体的代码。代码很短，但能完整诠释Promise原理。</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//promise的本质就是一个有限状态机</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise2</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">    <span class="keyword">let</span> me=<span class="keyword">this</span>;</span><br><span class="line">    me.__queue = [];</span><br><span class="line">    me.__status=<span class="string">''</span>;</span><br><span class="line">    me.__success_res=<span class="literal">null</span>;</span><br><span class="line">    me.__error_res=<span class="literal">null</span>;</span><br><span class="line">    fn&amp;&amp;fn(<span class="function"><span class="params">value</span>=&gt;</span>&#123;me.resolve(value)&#125;, reason=&gt;&#123;me.reject(reason)&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  resolve(...args)&#123;</span><br><span class="line">    <span class="keyword">this</span>.__status = <span class="string">'success'</span>;</span><br><span class="line">    <span class="keyword">this</span>.__success_res = args;</span><br><span class="line">    <span class="keyword">this</span>.__queue.forEach(<span class="function"><span class="params">json</span>=&gt;</span>&#123;</span><br><span class="line">      json.resolve(...args);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  reject(...args)&#123;</span><br><span class="line">    <span class="keyword">this</span>.__status = <span class="string">'error'</span>;</span><br><span class="line">    <span class="keyword">this</span>.__success_res = args;</span><br><span class="line">    <span class="keyword">this</span>.__queue.forEach(<span class="function"><span class="params">json</span>=&gt;</span>&#123;</span><br><span class="line">      json.reject(...args);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  then(resolve, reject) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.__status == <span class="string">'success'</span>) &#123;</span><br><span class="line">      resolve(...this.__success_res);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.__status == <span class="string">"error"</span>) &#123;</span><br><span class="line">      reject(...this.__error_res);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.__queue.push(&#123;</span><br><span class="line">        resolve,</span><br><span class="line">        reject</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Promise2.all=<span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res=[];</span><br><span class="line">  <span class="keyword">let</span> p=  <span class="keyword">new</span> Promise2();</span><br><span class="line">  <span class="keyword">let</span> i=<span class="number">0</span>;</span><br><span class="line">  next();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> me=<span class="keyword">this</span>;</span><br><span class="line">    args[i].then(<span class="function"><span class="keyword">function</span>(<span class="params">re</span>)</span>&#123;</span><br><span class="line">      res.push(re);</span><br><span class="line">      i++;</span><br><span class="line">      <span class="keyword">if</span> (i==args.length) &#123;</span><br><span class="line">        p.resolve(res);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,p.reject);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test1</span></span><br><span class="line"><span class="keyword">let</span> p=<span class="keyword">new</span> Promise2(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    resolve(<span class="number">12</span>);</span><br><span class="line">  &#125;,<span class="number">500</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">  alert(params);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"失败"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//test2</span></span><br><span class="line"><span class="keyword">let</span> p1=<span class="keyword">new</span> Promise2();</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  p1.resolve(<span class="number">13</span>);</span><br><span class="line">&#125;,<span class="number">500</span>);</span><br><span class="line">p1.then(<span class="function"><span class="params">num</span>=&gt;</span>&#123;</span><br><span class="line">  alert(num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//test3</span></span><br><span class="line"><span class="keyword">let</span> p2=<span class="keyword">new</span> Promise2();</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  p2.resolve(<span class="number">12</span>);</span><br><span class="line">&#125;,<span class="number">500</span>);</span><br><span class="line"><span class="keyword">let</span> p3=<span class="keyword">new</span> Promise2();</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  p3.resolve(<span class="number">13</span>);</span><br><span class="line">&#125;,<span class="number">500</span>);</span><br><span class="line">Promise2.all([p2,p3]).then(<span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">  alert(args[<span class="number">0</span>]+args[<span class="number">1</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;状态机是什么？&lt;/a&gt;&lt;br&gt;&lt;i
      
    
    </summary>
    
    
      <category term="promise" scheme="http://zongzijie.github.io/tags/promise/"/>
    
      <category term="本质" scheme="http://zongzijie.github.io/tags/%E6%9C%AC%E8%B4%A8/"/>
    
  </entry>
  
  <entry>
    <title>macOS High Sierra 10.13.* 系统中找回telnet命令</title>
    <link href="http://zongzijie.github.io/2018/07/27/telnet-cli/"/>
    <id>http://zongzijie.github.io/2018/07/27/telnet-cli/</id>
    <published>2018-07-27T21:45:36.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<h3 id="macOS升级到High-Sierra后发现telnet命令不见了，两个命令教大家找回"><a href="#macOS升级到High-Sierra后发现telnet命令不见了，两个命令教大家找回" class="headerlink" title="macOS升级到High Sierra后发现telnet命令不见了，两个命令教大家找回"></a>macOS升级到High Sierra后发现telnet命令不见了，两个命令教大家找回</h3><h2 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><h2 id="安装telnet"><a href="#安装telnet" class="headerlink" title="安装telnet"></a>安装telnet</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install telnet</span><br></pre></td></tr></table></figure><p>over</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;macOS升级到High-Sierra后发现telnet命令不见了，两个命令教大家找回&quot;&gt;&lt;a href=&quot;#macOS升级到High-Sierra后发现telnet命令不见了，两个命令教大家找回&quot; class=&quot;headerlink&quot; title=&quot;macOS升
      
    
    </summary>
    
    
      <category term="brew" scheme="http://zongzijie.github.io/tags/brew/"/>
    
  </entry>
  
  <entry>
    <title>Gitflow日常工作中如何高效的实践Codereview</title>
    <link href="http://zongzijie.github.io/2018/07/01/code-review/"/>
    <id>http://zongzijie.github.io/2018/07/01/code-review/</id>
    <published>2018-07-01T19:15:49.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<p>工作中主代码仓库刚刚从TFS切换到Git，工作中的小伙伴还有很多不熟悉，思想也还停留在TFS中，并且我们以前并不重视代码检视，或者说做的不好，现在使用gitlab做源代码管理，有了天然的环境来推行高效的代码检视流程和规范。为此我花了点时间梳理了一版Gitflow中的代码检视实践方案。如图</p><p><img src="/images/code-review/code-review.png" alt=""></p><p><a href="https://www.processon.com/diagraming/5b38aaace4b0d97b02499b77" target="_blank" rel="noopener">图片看不清的话，点这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工作中主代码仓库刚刚从TFS切换到Git，工作中的小伙伴还有很多不熟悉，思想也还停留在TFS中，并且我们以前并不重视代码检视，或者说做的不好，现在使用gitlab做源代码管理，有了天然的环境来推行高效的代码检视流程和规范。为此我花了点时间梳理了一版Gitflow中的代码检视
      
    
    </summary>
    
      <category term="Git" scheme="http://zongzijie.github.io/categories/Git/"/>
    
    
      <category term="Gitflow" scheme="http://zongzijie.github.io/tags/Gitflow/"/>
    
      <category term="Codereview" scheme="http://zongzijie.github.io/tags/Codereview/"/>
    
  </entry>
  
  <entry>
    <title>Git 如何管理本地分支-删除多余分支</title>
    <link href="http://zongzijie.github.io/2018/06/30/manage-branch/"/>
    <id>http://zongzijie.github.io/2018/06/30/manage-branch/</id>
    <published>2018-06-30T21:59:43.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查找已经合并过的分支，也就是当前分支的直接上游分支，这些分支的特性通常都已经合并到当前分支了，推荐删除"><a href="#查找已经合并过的分支，也就是当前分支的直接上游分支，这些分支的特性通常都已经合并到当前分支了，推荐删除" class="headerlink" title="查找已经合并过的分支，也就是当前分支的直接上游分支，这些分支的特性通常都已经合并到当前分支了，推荐删除"></a>查找已经合并过的分支，也就是当前分支的直接上游分支，这些分支的特性通常都已经合并到当前分支了，推荐删除</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --merged</span><br><span class="line">* master</span><br><span class="line">  branch1 //直接上游分支，可以删除</span><br></pre></td></tr></table></figure><p>与其相反的分支，就是没有合并过的分支，如果删除这些分支，则会抛出错误，阻止危险操作<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --no-merged</span><br><span class="line">  branch2 //还没有与当前分支合并，不能删除</span><br><span class="line">$ git branch -d branch2</span><br><span class="line">error: The branch <span class="string">'testing'</span> is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run <span class="string">'git branch -D testing'</span>.</span><br></pre></td></tr></table></figure></p><p>当然，你可以强制删除，用大写的D即可 -D<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --no-merged</span><br><span class="line">  branch2 //还没有与当前分支合并，不能删除</span><br><span class="line">$ git branch -D branch2</span><br></pre></td></tr></table></figure></p><p>参考文献：<a href="http://iissnan.com/progit/html/zh/ch3_3.html" target="_blank" rel="noopener">http://iissnan.com/progit/html/zh/ch3_3.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;查找已经合并过的分支，也就是当前分支的直接上游分支，这些分支的特性通常都已经合并到当前分支了，推荐删除&quot;&gt;&lt;a href=&quot;#查找已经合并过的分支，也就是当前分支的直接上游分支，这些分支的特性通常都已经合并到当前分支了，推荐删除&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="Git" scheme="http://zongzijie.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git 如何删除远程分支</title>
    <link href="http://zongzijie.github.io/2018/06/30/push-branch-to-remote/"/>
    <id>http://zongzijie.github.io/2018/06/30/push-branch-to-remote/</id>
    <published>2018-06-30T21:46:49.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git删除远程分支的语法很无里头"><a href="#Git删除远程分支的语法很无里头" class="headerlink" title="Git删除远程分支的语法很无里头"></a>Git删除远程分支的语法很无里头</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :远程分支1</span><br></pre></td></tr></table></figure><p>单看这个命令真的很难理解<br>但是如果结合新增一个远程分支的命令来记忆，就很容易了，接着看<br>将本地的分支推送到远程仓库<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push [远程名] 本地分支1 :本地分支1 //上传我本地的 本地分支1 到远程仓库中去，称它为 本地分支1</span><br></pre></td></tr></table></figure></p><p>我们平时使用的都是<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push [远程名] 本地分支1</span><br></pre></td></tr></table></figure></p><p>这其实可以看作是语法糖，实际执行的命令还是前者。<br>所以这样对比来看就好记了。<br>删除远程分支的语法可以解读为：$ git push origin :远程分支1 //上传一个空白 到远程仓库中去，覆盖 远程分支1</p><p>参考文献：<a href="http://iissnan.com/progit/html/zh/ch3_5.html" target="_blank" rel="noopener">http://iissnan.com/progit/html/zh/ch3_5.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Git删除远程分支的语法很无里头&quot;&gt;&lt;a href=&quot;#Git删除远程分支的语法很无里头&quot; class=&quot;headerlink&quot; title=&quot;Git删除远程分支的语法很无里头&quot;&gt;&lt;/a&gt;Git删除远程分支的语法很无里头&lt;/h3&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="Git" scheme="http://zongzijie.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>如何从Github上下载单个文件（适用于Mac与linux用户）</title>
    <link href="http://zongzijie.github.io/2018/06/30/download-singlefile-from-github/"/>
    <id>http://zongzijie.github.io/2018/06/30/download-singlefile-from-github/</id>
    <published>2018-06-30T21:11:28.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="举例，从Github上下载git的源码中的一个自动完成git命令的bash命令文件-git-contrib-completion-git-completion-bash"><a href="#举例，从Github上下载git的源码中的一个自动完成git命令的bash命令文件-git-contrib-completion-git-completion-bash" class="headerlink" title="举例，从Github上下载git的源码中的一个自动完成git命令的bash命令文件 git/contrib/completion/git-completion.bash"></a>举例，从Github上下载git的源码中的一个自动完成git命令的bash命令文件 git/contrib/completion/git-completion.bash</h2><p>首先需要打开文件的原始页面，这个很容易，点击右上角的Raw按钮即可<br>接下来就会跳转到一个新页面地址如下，由于我的本地git版本是2.14.3，所以我查看此命令时也选择tag v2.14.3的标签去打开<br>    <a href="https://raw.githubusercontent.com/git/git/v2.14.3/contrib/completion/git-completion.bash" target="_blank" rel="noopener">https://raw.githubusercontent.com/git/git/v2.14.3/contrib/completion/git-completion.bash</a></p><p>然后打开终端，输入如下命令，即可下载到本地<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wjjmac:~ zongzijie$ curl <span class="string">'https://raw.githubusercontent.com/git/git/v2.14.3/contrib/completion/git-completion.bash'</span> &gt;&gt; .git-completion.bash</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 70930  100 70930    0     0  17501      0  0:00:04  0:00:04 --:--:-- 17504</span><br></pre></td></tr></table></figure></p><p>可以看到，已经将命令下载到本地了，现在只需要输入命令的前几个字母，马上就能自动提示了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wjjmac:~ zongzijie$ <span class="built_in">source</span> .git-completion.bash</span><br><span class="line">wjjmac:~ zongzijie$ git sta</span><br><span class="line">stage    stash    status</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;举例，从Github上下载git的源码中的一个自动完成git命令的bash命令文件-git-contrib-completion-git-completion-bash&quot;&gt;&lt;a href=&quot;#举例，从Github上下载git的源码中的一个自动完成git命令的bas
      
    
    </summary>
    
    
      <category term="MacOs" scheme="http://zongzijie.github.io/tags/MacOs/"/>
    
      <category term="Github" scheme="http://zongzijie.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Git错误解决方案</title>
    <link href="http://zongzijie.github.io/2018/06/30/solution/"/>
    <id>http://zongzijie.github.io/2018/06/30/solution/</id>
    <published>2018-06-30T00:03:58.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>Rename from ‘D:/Git/slxt/.git/index.lock’ to ‘D:/Git/slxt/.git/index’ failed. Should I try again? (y/n)</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>rm -rf .git/index –清除暂存<br>git reset –mixed head –强制恢复到工作区域状态</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h3&gt;&lt;p&gt;Rename from ‘D:/Git/slxt/.git/index.lock’ to ‘D:/Git/slxt/.git/ind
      
    
    </summary>
    
    
      <category term="Git" scheme="http://zongzijie.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>git status 中文路径乱码问题解决方案</title>
    <link href="http://zongzijie.github.io/2018/06/26/luanma/"/>
    <id>http://zongzijie.github.io/2018/06/26/luanma/</id>
    <published>2018-06-26T18:47:16.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<p>问题<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure></p><p><img src="/images/luanma/before.jpeg" alt=""><br>直接上代码<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config –-global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/luanma/after.jpeg" alt=""><br>over</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="git" scheme="http://zongzijie.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>基于Eslint兼容TFS与Git两种仓库的静态代码扫描平台</title>
    <link href="http://zongzijie.github.io/2018/06/24/static-check/"/>
    <id>http://zongzijie.github.io/2018/06/24/static-check/</id>
    <published>2018-06-24T14:40:18.000Z</published>
    <updated>2019-09-21T13:20:32.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先看效果"><a href="#先看效果" class="headerlink" title="先看效果"></a>先看效果</h2><p>首页<br><img src="/images/static-check/首页.png" alt=""><br>Git检查<br><img src="/images/static-check/git.png" alt=""><br>TFS检查<br><img src="/images/static-check/tfs.png" alt=""><br>统计<br><img src="/images/static-check/统计.png" alt=""><br>规则列表<br><img src="/images/static-check/规则列表.png" alt=""><br>eslint报告<br><img src="/images/static-check/Eslint报告.png" alt=""></p><h2 id="废话不多说直接上代码"><a href="#废话不多说直接上代码" class="headerlink" title="废话不多说直接上代码"></a>废话不多说直接上代码</h2><h3 id="下载代码，安装依赖"><a href="#下载代码，安装依赖" class="headerlink" title="下载代码，安装依赖"></a>下载代码，安装依赖</h3><p>环境：macOs<br>依赖：node git mongodb(需要提前安装)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/zongzijie/static-code-check.git static-check</span><br><span class="line">Cloning into <span class="string">'static-check'</span>...</span><br><span class="line">remote: Counting objects: 390, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (28/28), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 390 (delta 14), reused 36 (delta 10), pack-reused 340</span><br><span class="line">Receiving objects: 100% (390/390), 114.90 KiB | 255.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (204/204), <span class="keyword">done</span>.</span><br><span class="line">$ <span class="built_in">cd</span> static-check/</span><br><span class="line">$ npm install</span><br><span class="line">npm ERR! code EBADPLATFORM </span><br><span class="line">npm ERR! notsup Unsupported platform <span class="keyword">for</span> node-windows@0.1.14: wanted &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span><br><span class="line">npm ERR! notsup Valid OS:    win32</span><br><span class="line">npm ERR! notsup Valid Arch:  any</span><br><span class="line">npm ERR! notsup Actual OS:   darwin</span><br><span class="line">npm ERR! notsup Actual Arch: x64</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /Users/zongzijie/.npm/_logs/2018-06-24T08_52_57_971Z-debug.log</span><br><span class="line">$</span><br></pre></td></tr></table></figure></p><p>安装NPM依赖时，在非windows平台上会报错（如上），尽管忽略，node-windows 是为了在windows平台上实现windows服务开机自启动所做的优化，可以支持开机自动启动站点服务，但还在测试阶段可能会有bug。<br>接下来</p><h3 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brew install mongodb</span><br></pre></td></tr></table></figure><h3 id="创建-MongoDB-数据库"><a href="#创建-MongoDB-数据库" class="headerlink" title="创建 MongoDB 数据库"></a>创建 MongoDB 数据库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir -p /data/db</span><br></pre></td></tr></table></figure><h3 id="运行-MongoDB"><a href="#运行-MongoDB" class="headerlink" title="运行 MongoDB"></a>运行 MongoDB</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mongod</span><br></pre></td></tr></table></figure><h4 id="如果需要支撑TFS仓库的代码检查，还需要安装git-tf"><a href="#如果需要支撑TFS仓库的代码检查，还需要安装git-tf" class="headerlink" title="如果需要支撑TFS仓库的代码检查，还需要安装git-tf"></a>如果需要支撑TFS仓库的代码检查，还需要安装git-tf</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git-tf</span><br></pre></td></tr></table></figure><h3 id="运行站点"><a href="#运行站点" class="headerlink" title="运行站点"></a>运行站点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node bin/www</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a></p><h3 id="最后还是要对的起自己，说说做这个平台的初衷"><a href="#最后还是要对的起自己，说说做这个平台的初衷" class="headerlink" title="最后还是要对的起自己，说说做这个平台的初衷"></a>最后还是要对的起自己，说说做这个平台的初衷</h3><p>代码这个东西不维护的话，随着时间推移，环境变迁，时代推进，代码是会腐烂变质的。<br>这个代码检查平台主要是为了工程度量，作为完成标尺的一部分，比如不允许有错误，在某个时间点，问题必须归零，还可以使用自动构建–目前只支持webapi（其实就是直接模拟http客户端调用检查接口，具体使用方法就不多说了，与用户点击开始检查没两样，可以自行模拟）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;先看效果&quot;&gt;&lt;a href=&quot;#先看效果&quot; class=&quot;headerlink&quot; title=&quot;先看效果&quot;&gt;&lt;/a&gt;先看效果&lt;/h2&gt;&lt;p&gt;首页&lt;br&gt;&lt;img src=&quot;/images/static-check/首页.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;Git检查&lt;
      
    
    </summary>
    
      <category term="轮子" scheme="http://zongzijie.github.io/categories/%E8%BD%AE%E5%AD%90/"/>
    
      <category term="代码" scheme="http://zongzijie.github.io/categories/%E8%BD%AE%E5%AD%90/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="Git" scheme="http://zongzijie.github.io/tags/Git/"/>
    
      <category term="javascript" scheme="http://zongzijie.github.io/tags/javascript/"/>
    
      <category term="mongodb" scheme="http://zongzijie.github.io/tags/mongodb/"/>
    
      <category term="git-tf" scheme="http://zongzijie.github.io/tags/git-tf/"/>
    
      <category term="nodejs" scheme="http://zongzijie.github.io/tags/nodejs/"/>
    
      <category term="eslint" scheme="http://zongzijie.github.io/tags/eslint/"/>
    
      <category term="express" scheme="http://zongzijie.github.io/tags/express/"/>
    
      <category term="TFS" scheme="http://zongzijie.github.io/tags/TFS/"/>
    
  </entry>
  
</feed>
